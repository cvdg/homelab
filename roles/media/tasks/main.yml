---
- name: Install Jellyfin requirements
  ansible.builtin.apt:
    name: '{{ media_packages }}'
    state: present
  when: media_role

- name: Install Jellyfin GPG key
  ansible.builtin.apt_key:
    url: https://repo.jellyfin.org/jellyfin_team.gpg.key
    state: present
  when: media_role

- name: Install Jellyfin repository
  ansible.builtin.apt_repository:
    repo: 'deb https://repo.jellyfin.org/debian/ {{ ansible_distribution_release }} main'
    filename: jellyfin
    state: present
  when: media_role

- name: Install Jellyfin
  ansible.builtin.apt:
    name: jellyfin
    state: present
    update_cache: true
  when: media_role

#
# Check if mount point exists before trying to create it,
# else it gives an error when the mount point exists and
# is mounted read-only.
#
- name: Check if media mount point exists
  ansible.builtin.stat:
    path: /mnt/media
  register: media
  when: media_role

- name: Create media mount point
  ansible.builtin.file:
    path: /mnt/media
    state: directory
    owner: jellyfin
    group: jellyfin
    mode: '0755'
  when: media_role and (not media.stat.isdir is defined or not media.stat.isdir)

- name: Copy mnt-media.mount
  ansible.builtin.copy:
    src: mnt-media.mount
    dest: /etc/systemd/system
    owner: root
    group: root
    mode: '0644'
  when: media_role

- name: Copy mnt-media.automount
  ansible.builtin.copy:
    src: mnt-media.automount
    dest: /etc/systemd/system
    owner: root
    group: root
    mode: '0644'
  when: media_role

- name: Start mnt-media.automount
  ansible.builtin.systemd:
    name: mnt-media.automount
    state: started
    enabled: true
    daemon-reload: true
  when: media_role

- name: Create /data directories
  ansible.builtin.file:
    name: '{{ item }}'
    state: directory
    owner: '{{ media_owner }}'
    group: '{{ media_group }}'
    mode: '0775'
  loop:
    - /data/media
    - /data/media/audio
    - /data/media/book
    - /data/media/movie
    - /data/media/tv
    - /data/torrent
    - /data/torrent/audio
    - /data/torrent/book
    - /data/torrent/movie
    - /data/torrent/tv
  when: media_role

- name: Copy /etc/rsyncd.conf
  ansible.builtin.copy:
    src: rsyncd.conf
    dest: /etc/rsyncd.conf
    owner: root
    group: root
    mode: '0644'
  when: media_role

- name: Start rsync.service
  ansible.builtin.systemd:
    name: rsync.service
    state: started
    enabled: true
  when: media_role

- name: Copy compose.yml
  ansible.builtin.copy:
    src: compose.yml
    dest: '/home/{{ media_owner }}/compose.yml'
    owner: '{{ media_owner }}'
    group: '{{ media_owner }}'
    mode: '0644'
  when: media_role

- name: Create appdata directories
  ansible.builtin.file:
    name: '{{ item }}'
    state: directory
    owner: '{{ media_owner }}'
    group: '{{ media_group }}'
    mode: '0775'
  loop:
    - '/home/{{ media_owner }}/appdata'
    - '/home/{{ media_owner }}/appdata/prowlarr'
    - '/home/{{ media_owner }}/appdata/qbittorrent'
    - '/home/{{ media_owner }}/appdata/radarr'
    - '/home/{{ media_owner }}/appdata/sonarr'
  when: media_role
